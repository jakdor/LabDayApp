apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

project.ext {
    androidXVersion = "1.1.0"
    supportVersion = "1.0.0"
    lifecycleVersion = "2.1.0"
    databindingCompilerVersion = "3.5.1"
    constraintLayoutVersion = "1.1.3"
    sqliteVersion = "2.0.1"
    glideVersion = "4.9.0"
    daggerVersion = "2.21"
    retrofitVersion = "2.3.0"
    okHttpVersion = "3.9.1"
    rxJavaVersion = "2.1.7"
    rxAndroidVersion = "2.1.1"
    concealVersion = "2.0.1"
    sqlBriteVersion = "3.1.0"
    gmsMapsVersion = "17.0.0"
    timberVersion = "4.7.1"
    crashlyticsVersion = "2.10.1"

    junitVersion = "4.12"
    mockitoVersion = "2.13.0"
    robolectricVersion = "3.6.1"
    robolectricShadowsVersion = "3.3.2"
    androidTestRunnerVersion = "1.0.1"
    espressoVersion = "3.0.1"
    daggerMockVersion = "0.8.2"
    restMockVersion = "0.2.2"
    leakCanaryVersion = "1.6.3"
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.0'
    defaultConfig {
        applicationId "com.jakdor.labday"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 7
        versionName "2.1.0"
        manifestPlaceholders = [crashlytics:getApiKey("crashlytics.key")]
        testInstrumentationRunner 'com.jakdor.labday.InstrumentationTestRunner'
        //testInstrumentationRunner "com.jakdor.labday.EspressoRunner"
    } //todo find way to automatically switch between testInstrumentationRunners
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    androidExtensions {
        experimental = true
    }
}

android.sourceSets {
    test {
        java.srcDirs += "$projectDir/src/testShared"
    }

    androidTest {
        java.srcDirs += "$projectDir/src/testShared"
    }
}

kapt {
    generateStubs = true
}

// Ensure the no-op dependency is always used in JVM tests.
configurations.all { config ->
    if (config.name.contains('LocalTests')
            || config.name.contains('JUnitInstrumentationTests')
            || config.name.contains('EspressoTests')) {
        config.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
            }
        }
    }
}

//get api key from file
def getApiKey(String propertyName) {
    def propsFile = rootProject.file('apikeys.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propertyName]
    } else {
        return ""
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    kapt "androidx.databinding:databinding-compiler:$project.databindingCompilerVersion"

    //support libs
    kapt "androidx.annotation:annotation:$project.androidXVersion"
    implementation "androidx.appcompat:appcompat:$project.androidXVersion"
    implementation "androidx.legacy:legacy-support-v4:$project.supportVersion"
    implementation "androidx.cardview:cardview:$project.supportVersion"
    implementation "com.google.android.material:material:$project.supportVersion"
    implementation "androidx.constraintlayout:constraintlayout:$project.constraintLayoutVersion"

    //android architecture
    kapt "androidx.lifecycle:lifecycle-compiler:$project.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$project.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime:$project.lifecycleVersion"
    implementation "androidx.sqlite:sqlite-framework:$project.sqliteVersion"

    //Glide
    implementation "com.github.bumptech.glide:glide:$project.glideVersion"
    kapt "com.github.bumptech.glide:compiler:$project.glideVersion"

    //Dagger core
    kapt "com.google.dagger:dagger-compiler:$project.daggerVersion"
    implementation "com.google.dagger:dagger:$project.daggerVersion"

    //Dagger Android
    kapt "com.google.dagger:dagger-compiler:$project.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$project.daggerVersion"
    implementation "com.google.dagger:dagger:$project.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$project.daggerVersion"

    //retrofit
    implementation "com.squareup.retrofit2:converter-gson:$project.retrofitVersion"
    implementation "com.squareup.retrofit2:retrofit:$project.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$project.retrofitVersion"

    //okHttp
    implementation "com.squareup.okhttp3:okhttp:$project.okHttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$project.okHttpVersion"

    //rxJava
    implementation "io.reactivex.rxjava2:rxjava:$project.rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$project.rxAndroidVersion"

    //Conceal
    implementation "com.facebook.conceal:conceal:$project.concealVersion@aar"

    //SQLBrite
    implementation "com.squareup.sqlbrite3:sqlbrite:$project.sqlBriteVersion"

    //GMS
    implementation "com.google.android.gms:play-services-maps:$project.gmsMapsVersion"
    implementation "com.google.android.gms:play-services-location:$project.gmsMapsVersion"

    //Timber logger
    implementation "com.jakewharton.timber:timber:$project.timberVersion"

    //Fabric Crashlytics
    implementation "com.crashlytics.sdk.android:crashlytics:$project.crashlyticsVersion"

    //testing
    testImplementation "junit:junit:$project.junitVersion"
    testImplementation "org.mockito:mockito-core:$project.mockitoVersion"
    testImplementation "org.robolectric:robolectric:$project.robolectricVersion"
    testImplementation "org.robolectric:shadows-support-v4:$project.robolectricShadowsVersion"
    androidTestImplementation "org.mockito:mockito-android:$project.mockitoVersion"
    androidTestImplementation "com.github.andrzejchm.RESTMock:android:$project.restMockVersion"
    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$project.leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$project.leakCanaryVersion"
}
